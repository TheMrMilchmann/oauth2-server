com.gw2auth:
  oauth2:
    client:
      s3:
        bucket: ${AWS_S3_SESSION_BUCKET}
        prefix: "oauth2/authorization/"
    addfederation:
      s3:
        bucket: ${AWS_S3_SESSION_BUCKET}
        prefix: "oauth2/addfederation/"
  gw2:
    client:
      aws-lambda-proxy:
        arns: ${AWS_LAMBDA_PROXY_ARNS}
  token:
    name-check:
      interval: ${GW2AUTH_TOKEN_NAME_CHECK_INTERVAL}
    valid-check:
      interval: ${GW2AUTH_TOKEN_VALID_CHECK_INTERVAL}
      ignore-after: ${GW2AUTH_TOKEN_VALID_CHECK_IGNORE_AFTER}

server:
  error:
    path: '/error'
    whitelabel:
      enabled: false

spring:
  datasource:
    url: "jdbc:postgresql://${SERVER_POSTGRES_HOST}:${SERVER_POSTGRES_PORT}/${SERVER_POSTGRES_DB}${SERVER_POSTGRES_OPTIONS}"
    username: ${SERVER_POSTGRES_USER}
    password: ${SERVER_POSTGRES_PASSWORD}
    hikari:
      keepalive-time: 60000
      max-lifetime: 600000
  flyway:
    url: "jdbc:postgresql://${SERVER_POSTGRES_HOST}:${SERVER_POSTGRES_PORT}/${SERVER_POSTGRES_DB}${SERVER_POSTGRES_OPTIONS}"
    user: ${SERVER_FLYWAY_POSTGRES_USER}
    password: ${SERVER_FLYWAY_POSTGRES_PASSWORD}
  threads:
    virtual:
      enabled: true

management:
  endpoints:
    enabled-by-default: false